/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PassengerService } from "../passenger.service";
import { PassengerCreateInput } from "./PassengerCreateInput";
import { Passenger } from "./Passenger";
import { PassengerFindManyArgs } from "./PassengerFindManyArgs";
import { PassengerWhereUniqueInput } from "./PassengerWhereUniqueInput";
import { PassengerUpdateInput } from "./PassengerUpdateInput";

export class PassengerControllerBase {
  constructor(protected readonly service: PassengerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Passenger })
  async createPassenger(
    @common.Body() data: PassengerCreateInput
  ): Promise<Passenger> {
    return await this.service.createPassenger({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Passenger] })
  @ApiNestedQuery(PassengerFindManyArgs)
  async passengers(@common.Req() request: Request): Promise<Passenger[]> {
    const args = plainToClass(PassengerFindManyArgs, request.query);
    return this.service.passengers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Passenger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async passenger(
    @common.Param() params: PassengerWhereUniqueInput
  ): Promise<Passenger | null> {
    const result = await this.service.passenger({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Passenger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePassenger(
    @common.Param() params: PassengerWhereUniqueInput,
    @common.Body() data: PassengerUpdateInput
  ): Promise<Passenger | null> {
    try {
      return await this.service.updatePassenger({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Passenger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePassenger(
    @common.Param() params: PassengerWhereUniqueInput
  ): Promise<Passenger | null> {
    try {
      return await this.service.deletePassenger({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
